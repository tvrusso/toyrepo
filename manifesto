My primary goal in exploring options is to come up with a way that
makes it relatively painless to share at least part of the project's
git history with the public on github, while preventing ancient
history of the project from polluting the public repo, AND minimizing
the heartache for Xyce developers.

The driving idea here is that we are NOT creating a github project for
the purpose of opening the project up to collaboration with all and
sundry, just a way of short-circuiting our normal release process for
the purposes of getting code out to particularly important
collaborators on a more rapid cycle.

With that primary use case in mind, going overboard with the original
idea of "split the repo into two parts, one historical, one for all
future work" seems onerous and potentially dangerous.  Yes, doing so
would be just about the only way to go if we needed the Github repo to
be a working repo for back-and-forth collaboration with a huge user
and developer base.

But since we're viewing this Github repo as more of a distribution
channel than an active repo, it may be better to make it a *copy* of
part of the project history rather than a replacement working repo.

This will be a test of how well that can work.

The requirements

  - No project history prior to some effective date/commit should ever appear
    in the github repo.
  - We will not accept code from the github community except under very
    limited circumstances.
  - Only master branch will be shared, but only after that effective date.

How we're going to try to do things:

  - The effective starting commit on master will be tagged with the
    "START_PUBLIC" tag

  - Maintain a separate branch ("public_master") of the code, which
    will contain ONLY commits from master made after the effective
    date, but which will have been rebased onto an empty commit (made
    with "git commit-tree").

  - Tagging master after public_master rebase with LAST_PUBLIC_SYNC

  - public_master will perioically be synced with master by creating a
    temporary "public_sync" branch at master, rebasing public_sync to
    LAST_PUBLIC_SYNC onto public_master.  LAST_PUBLIC_SYNC will be force-moved
    and force-pushed to commit last synced.

I have created THREE repos to handle this process.  "toyrepo-internal"
is meant to mimic the real Xyce repos.  "toyrepo-admin" will be where
only the handful of administrators actually do the magic of copying
master to public_master.  "toyrepo-public" will mimic the Github repo,
and should never contain anything *BUT* the fake public history.

   git remote add admin git@gitlab-ex.sandia.gov:tvrusso/toyrepo-admin.git
   git remote add public git@gitlab-ex.sandia.gov:tvrusso/toyrepo-public.git

   git remote -v
      admin   git@gitlab-ex.sandia.gov:tvrusso/toyrepo-admin.git (fetch)
      admin   git@gitlab-ex.sandia.gov:tvrusso/toyrepo-admin.git (push)
      origin  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-internal.git (fetch)
      origin  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-internal.git (push)
      public  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-public.git (fetch)
      public  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-public.git (push)

It may not be necessary to do the tagging of LAST_PUBLIC_SYNC, as
rebasing all of master back to START_PUBLIC onto the fake commit might
be enough (depends on whether the rebase rewrites commits that already
exist on public_master or not).  This will be part of the
experimentation.

-- For our purposes, we have decided that in this repo commit d227f4e
   will mark the beginning of the public history.  This is where START_PUBLIC
   points.

-- We first created the public_master commit by rebasing from commit
   3fb76d5 back to START_PUBLIC onto public_master:


  git tag -f START_PUBLIC cbc5a78
  git push admin START_PUBLIC
  git checkout -b public_master
  echo 'Beginning of public history (truncated)' | git commit-tree START_PUBLIC^{tree}
   (The last command outputs the SHA-1 of the commit it created, which
    we use in the next command)
  git rebase --onto a71ad9ea9ced2cbdb9797ab87da30fb191d0661f cbc5a78
  git push admin public_master
  git push public public_master:master

Note the last command --- "public_master" in our admin repo is
actually called "master" in the public repo.

   git log --oneline --all --decorate --graph now shows:
* 41ea260 (public/master, admin/public_master, public_master) Document beginning of process
* 6e64d83 Add more content
* 37cb648 Begin cleanup for external
* a71ad9e Beginning of public history (truncated)
*   3fb76d5 (HEAD -> develop, origin/master, origin/develop, origin/HEAD, admin/master, admin/develop, master) Merge branch 'develop'
|\  
| * 774428e Document beginning of process
|/  
*   dcb469e Merge branch 'develop'
|\  
| * aa4d6bd Add more content
|/  
*   d227f4e Merge branch 'develop'
|\  
| * a78db5a Begin cleanup for external
|/  
*   cbc5a78 (tag: START_PUBLIC) Merge branch 'develop'
|\  
| *   2bf5b06 Merge branch 'feature-obfuscation' into develop
| |\  
|/ /  
| * c7da91d Start describing plan
|/  
* e9d5706 Add a few words
* 16ecf0d Start populating the early history of the project.
* 3a55821 Initial commit

So far, so good.  Now let's see how hard it is to keep everything in sync.


------
We have added more content onto develop and merged it into master:

* 41ea260 (public/master, admin/public_master, public_master) Document beginning of process
* 6e64d83 Add more content
* 37cb648 Begin cleanup for external
* a71ad9e Beginning of public history (truncated)

*   63071f1 (origin/master, origin/develop, origin/HEAD, admin/master, admin/develop, master, develop) Merge branch 'develop'
|\
| * 6f382be Start adding more content
|/
*   3fb76d5 (tag: LAST_PUBLIC_SYNC) Merge branch 'develop'
|\
| * 774428e Document beginning of process
|/
*   dcb469e Merge branch 'develop'
|\
| * aa4d6bd Add more content
|/
*   d227f4e Merge branch 'develop'
|\
| * a78db5a Begin cleanup for external
|/
*   cbc5a78 (tag: START_PUBLIC) Merge branch 'develop'
|\
| *   2bf5b06 Merge branch 'feature-obfuscation' into develop
| |\
|/ /
| * c7da91d Start describing plan
|/
* e9d5706 Add a few words
* 16ecf0d Start populating the early history of the project.
* 3a55821 Initial commit

Now let's try to sync everything up again:
  git checkout -b public_temp
  git rebase --onto public_master LAST_PUBLIC_SYNC
  git --oneline --decorate --all --graph
* cd2c5a9 (HEAD -> public_temp) Start adding more content
* 41ea260 (public/master, admin/public_master, public_master) Document beginning of process
* 6e64d83 Add more content
* 37cb648 Begin cleanup for external
* a71ad9e Beginning of public history (truncated)
*   63071f1 (origin/master, origin/develop, origin/HEAD, admin/master, admin/develop, master, develop) Merge branch 'develop'
|\  
| * 6f382be Start adding more content
|/  
*   3fb76d5 (tag: LAST_PUBLIC_SYNC) Merge branch 'develop'
|\  
| * 774428e Document beginning of process
|/  
*   dcb469e Merge branch 'develop'
|\  
| * aa4d6bd Add more content
|/  
*   d227f4e Merge branch 'develop'
|\  
| * a78db5a Begin cleanup for external
|/  
*   cbc5a78 (tag: START_PUBLIC) Merge branch 'develop'
|\  
| *   2bf5b06 Merge branch 'feature-obfuscation' into develop
| |\  
|/ /  
| * c7da91d Start describing plan
|/  
* e9d5706 Add a few words
* 16ecf0d Start populating the early history of the project.
* 3a55821 Initial commit


OK, we have it.  Notice that each time we do this rebase onto the
public side, we lose all evidence of branch merges.  This might or
might be an issue.

Now merge public_temp into public_master
  git checkout public_master
  git merge public_temp
  git branch -D public_temp

Finally we push all the stuffs:
  git checkout master
  git tag -f LAST_PUBLIC_SYNC
  git push admin --force LAST_PUBLIC_SYNC
  git push origin :
  git push admin :
  git push public public_master:master

Note that it is ESSENTIAL to specify "public_master:master" in the
last command, because if we try "git push public :" then it'll try to
push master (not public_master) to the public remote, and refuse to do
so because there are commits in public/master that don't exist in
either origin/master or admin/master.

Our git tree now looks like:

* cd2c5a9 (public/master, admin/public_master, public_master) Start adding more content
* 41ea260 Document beginning of process
* 6e64d83 Add more content
* 37cb648 Begin cleanup for external
* a71ad9e Beginning of public history (truncated)
*   63071f1 (HEAD -> develop, tag: LAST_PUBLIC_SYNC, origin/master, origin/develop, origin/HEAD, admin/master, admin/develop, master) Merge branch 'develop'
|\
| * 6f382be Start adding more content
|/
*   3fb76d5 Merge branch 'develop'
|\
| * 774428e Document beginning of process
|/
*   dcb469e Merge branch 'develop'
|\
| * aa4d6bd Add more content
|/
*   d227f4e Merge branch 'develop'
|\
| * a78db5a Begin cleanup for external
|/
*   cbc5a78 (tag: START_PUBLIC) Merge branch 'develop'
|\
| *   2bf5b06 Merge branch 'feature-obfuscation' into develop
| |\
|/ /
| * c7da91d Start describing plan
|/
* e9d5706 Add a few words
* 16ecf0d Start populating the early history of the project.
* 3a55821 Initial commit


--- Possible script for doing this easily
#!/bin/sh
git checkout master
git checkout -b public_temp
git rebase --onto public_master LAST_PUBLIC_SYNC
git checkout public_master
git merge public_temp
git checkout master
git tag -f LAST_PUBLIC_SYNC

# This might need to be a separate script, to give the cabal the
# opportunity (and obligation) to verify that all is well
git push origin :
git push admin :
git push admin --force LAST_PUBLIC_SYNC
git branch -D public_temp
git push public public_master:master
----------------

Cautions:

  - Cabalists MUST assure that master is ready to be shared
  - it is probably best to do the pushes in a separate script, forcing
    a review of the git tree to make absolutely certain that it's correct.
  - Jason and I had discussed making the actual push to public (last step
    in script above) have a "two-person rule" --- that is, at least two
    cabalists must sign off on the state of the admin repo before agreeing
    that it is safe to push to public repo.

I should also note that I have been following a similar process in this toy
repo that I have been following when doing develop->master merges of Xyce:

   git checkout master
   git merge --no-ff develop
   git checkout develop
   git merge master    (fast forward merge)


This collapses the develop and master "swim lanes" into a single
commit, giving it a clear merging lane pattern rather than a "ladder"
pattern.  This makes for much more readable branching structure in
gitk or "git log --oneline--all --graph --decorate"

Another note: I do "git log --oneline--all --graph --decorate" so
often I have it aliased:

    git config --global alias.gl "log --oneline--all --graph --decorate"

so that I can just do "git gl" instead of the big command.  I chose
"gl" because to me it stands for "graphical log".


---- NOTE!

When I created the public_master branch, I did so by choosing a commit
that is one older than what I should have chosen, because the clean up
of "impolitic remarks" should not have been in the history of
public_master, and it got there.

Here's where it went wrong:

This was the tree before I created public_master:

*   3fb76d5 (HEAD -> develop, origin/master, origin/develop, origin/HEAD, admin/master, admin/develop, master) Merge branch 'develop'
|\  
| * 774428e Document beginning of process
|/  
*   dcb469e Merge branch 'develop'
|\  
| * aa4d6bd Add more content
|/  
*   d227f4e Merge branch 'develop'
|\  
| * a78db5a Begin cleanup for external
|/  
*   cbc5a78 Merge branch 'develop'
|\  
| *   2bf5b06 Merge branch 'feature-obfuscation' into develop
| |\  
|/ /  
| * c7da91d Start describing plan
|/  
* e9d5706 Add a few words
* 16ecf0d Start populating the early history of the project.
* 3a55821 Initial commit


I incorrectly chose commit d227f4e as the first that should be in
public_master, and commit cbc5a78 as "START_PUBLIC".  The result is
that the first commit in public_master still has the file
"impolitic_remark" and commit d227f4e removes that file.

Instead, I should have chosen commit dcb469e as the first real commit of
public_master, and commit d227f4e as START_PUBLIC.  So it should have gone:

  git tag -f START_PUBLIC d227f4e
  git push admin START_PUBLIC
  git checkout -b public_master
  echo 'Beginning of public history (truncated)' | git commit-tree START_PUBLIC^{tree}
  (then rebase public_master onto the SHA-1 emitted by commit-tree)


This highlights the need for this process to be undertaken carefully,
with more than one set of eyes on the resulting "public" repo before
it is actually exposed to the public.

---- Note on flattening of history

Turns out that if I rebase with the "-p" option, it should preserve
merge commits when doing the rebase onto public_master.  This may or
may not be desirable.  But this change will be incorporated with that
option so we can see it work.

So if it is really required to preserve all the look of the master
branch, complete with merge commits from side branches such as
develop, the amended process would be:

------
#!/bin/sh
git checkout master
git checkout -b public_temp
git rebase -p --onto public_master LAST_PUBLIC_SYNC
git checkout public_master
git merge public_temp
git checkout master
git tag -f LAST_PUBLIC_SYNC

# This might need to be a separate script, to give the cabal the
# opportunity (and obligation) to verify that all is well
git push origin :
git push admin :
git push admin --force LAST_PUBLIC_SYNC
git branch -D public_temp
git push public public_master:master
-------

I am not convinced that this really adds anything to the experience,
but it might.

-----

Actually, when it comes to releases and release branches, I see the
point of maintaining the branching structure.  I have just created a
"release branch" of this repo and generated a public release out of
it.  It went like this:

    git checkout -b release-0.0.1
    emacs -nw RELEASE_NOTES
    git add .
    git commit
    emacs -nw RELEASE_NOTES
    git add .
    git commit
    git tag -a -m "Official release 0.0.1" Release-0.0.1
    git push origin release-0.0.1
    git push origin Release-0.0.1
    git push admin release-0.0.1
    git push admin Release-0.0.1
    git push origin : ; git push admin :
    #then we execute the normal "copy to public_master process..."
      git checkout master
      [...etc...]
      git push public public_master:master
    #now create a tag for the public repo --- not the same as the internal tag
    git tag -a -m "Relase 0.0.1" PUBLIC-Release-0.0.1 87a0383   # This is the SHA of the commit that corresponds to the Release-0.0.1 tag, but on the public_master branch.
    git push public PUBLIC-Release-0.0.1
    git push admin PUBLIC-Release-0.0.1


