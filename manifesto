My primary goal in exploring options is to come up with a way that
makes it relatively painless to share at least part of the project's
git history with the public on github, while preventing ancient
history of the project from polluting the public repo, AND minimizing
the heartache for Xyce developers.

The driving idea here is that we are NOT creating a github project for
the purpose of opening the project up to collaboration with all and
sundry, just a way of short-circuiting our normal release process for
the purposes of getting code out to particularly important
collaborators on a more rapid cycle.

With that primary use case in mind, going overboard with the original
idea of "split the repo into two parts, one historical, one for all
future work" seems onerous and potentially dangerous.  Yes, doing so
would be just about the only way to go if we needed the Github repo to
be a working repo for back-and-forth collaboration with a huge user
and developer base.

But since we're viewing this Github repo as more of a distribution
channel than an active repo, it may be better to make it a *copy* of
part of the project history rather than a replacement working repo.

This will be a test of how well that can work.

The requirements

  - No project history prior to some effective date/commit should ever appear
    in the github repo.
  - We will not accept code from the github community except under very
    limited circumstances.
  - Only master branch will be shared, but only after that effective date.

How we're going to try to do things:

  - The effective starting commit on master will be tagged with the
    "START_PUBLIC" tag

  - Maintain a separate branch ("public_master") of the code, which
    will contain ONLY commits from master made after the effective
    date, but which will have been rebased onto an empty commit (made
    with "git commit-tree").

  - Tagging master after public_master rebase with LAST_PUBLIC_SYNC

  - public_master will perioically be synced with master by creating a
    temporary "public_sync" branch at master, rebasing public_sync to
    LAST_PUBLIC_SYNC onto public_master.  LAST_PUBLIC_SYNC will be force-moved
    and force-pushed to commit last synced.

I have created THREE repos to handle this process.  "toyrepo-internal"
is meant to mimic the real Xyce repos.  "toyrepo-admin" will be where
only the handful of administrators actually do the magic of copying
master to public_master.  "toyrepo-public" will mimic the Github repo,
and should never contain anything *BUT* the fake public history.

   git remote add admin git@gitlab-ex.sandia.gov:tvrusso/toyrepo-admin.git
   git remote add public git@gitlab-ex.sandia.gov:tvrusso/toyrepo-public.git

   git remote -v
      admin   git@gitlab-ex.sandia.gov:tvrusso/toyrepo-admin.git (fetch)
      admin   git@gitlab-ex.sandia.gov:tvrusso/toyrepo-admin.git (push)
      origin  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-internal.git (fetch)
      origin  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-internal.git (push)
      public  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-public.git (fetch)
      public  git@gitlab-ex.sandia.gov:tvrusso/toyrepo-public.git (push)

It may not be necessary to do the tagging of LAST_PUBLIC_SYNC, as
rebasing all of master back to START_PUBLIC onto the fake commit might
be enough (depends on whether the rebase rewrites commits that already
exist on public_master or not).  This will be part of the
experimentation.

-- For our purposes, we have decided that in this repo commit d227f4e
   will mark the beginning of the public history.  This is where START_PUBLIC
   points.

-- We first created the public_master commit by rebasing from commit
   3fb76d5 back to START_PUBLIC onto public_master:


  git tag -f START_PUBLIC cbc5a78
  git push admin START_PUBLIC
  git checkout -b public_master
  echo 'Beginning of public history (truncated)' | git commit-tree START_PUBLIC^{tree}
   (The last command outputs the SHA-1 of the commit it created, which
    we use in the next command)
  git rebase --onto a71ad9ea9ced2cbdb9797ab87da30fb191d0661f cbc5a78
  git push admin public_master
  git push public public_master:master

Note the last command --- "public_master" in our admin repo is
actually called "master" in the public repo.

   git log --oneline --all --decorate --graph now shows:
* 41ea260 (public/master, admin/public_master, public_master) Document beginning of process
* 6e64d83 Add more content
* 37cb648 Begin cleanup for external
* a71ad9e Beginning of public history (truncated)
*   3fb76d5 (HEAD -> develop, origin/master, origin/develop, origin/HEAD, admin/master, admin/develop, master) Merge branch 'develop'
|\  
| * 774428e Document beginning of process
|/  
*   dcb469e Merge branch 'develop'
|\  
| * aa4d6bd Add more content
|/  
*   d227f4e Merge branch 'develop'
|\  
| * a78db5a Begin cleanup for external
|/  
*   cbc5a78 (tag: START_PUBLIC) Merge branch 'develop'
|\  
| *   2bf5b06 Merge branch 'feature-obfuscation' into develop
| |\  
|/ /  
| * c7da91d Start describing plan
|/  
* e9d5706 Add a few words
* 16ecf0d Start populating the early history of the project.
* 3a55821 Initial commit

So far, so good.  Now let's see how hard it is to keep everything in sync.
